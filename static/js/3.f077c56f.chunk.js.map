{"version":3,"sources":["components/Profile/MyPosts/Post/Post.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/ProfileInfo/profileInfo.module.css","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/ProfileInfo/ProfileStatus/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","Post","props","className","style","item","src","alt","postText","message","likesCount","maxLength10","maxLengthCreator","MyPosts","React","memo","postsElements","posts","map","p","s","postsBlock","AddNewPostFormResux","onSubmit","values","addPost","newPostText","reduxForm","form","handleSubmit","Field","name","component","Textarea","validate","required","MyPostsContainer","connect","state","profilePage","dispatch","addPostAction","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onClick","onChange","e","currentTarget","value","onBlur","updateStatus","autoFocus","ProfileInfo","profile","descriptionBlock","photos","large","avatar","withoutPhoto","profileName","fullName","Profile","store","Preloader","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","users","Component","compose","auth","id","isAuth","withRouter","withAuthRedirect"],"mappings":"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","file":"static/js/3.f077c56f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__fRDIk\",\"postText\":\"Post_postText__3Kx83\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"MyPosts_item__34NOP\",\"postsBlock\":\"MyPosts_postsBlock__2eA4B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"profileInfo_descriptionBlock__2SMk8\",\"headImage\":\"profileInfo_headImage__3PbVb\",\"profileName\":\"profileInfo_profileName__IuVmD\",\"avatar\":\"profileInfo_avatar__3A2CU\"};","import style from './Post.module.css'\r\n\r\nconst Post = (props) => {\r\n    return <div className ={style.item}>\r\n                <div>\r\n                    <img src=\"https://trikky.ru/wp-content/blogs.dir/1/files/2020/05/29/2facb44ee57306645faedea7a5f94d25.jpg\" alt=\"AVA\"/>\r\n                </div>\r\n                <div className = {style.postText}>{props.message}</div>\r\n                <div className = \"button\">\r\n                    <button>{props.likesCount} like</button>\r\n                </div>               \r\n            </div>\r\n}\r\n\r\nexport default Post","import Post from './Post/Post'\r\nimport s from './MyPosts.module.css'\r\nimport React from 'react'\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport {required, maxLengthCreator} from '../../../utils/validators/validators'\r\nimport {Textarea} from '../../common/FormsControls/FormsControls'\r\n\r\nlet maxLength10 = maxLengthCreator (10);\r\n\r\nconst MyPosts = React.memo ((props) => {\r\n    let postsElements = props.posts.map (p => <Post message = {p.message} likesCount = {p.likesCount}/>)\r\n    let onAddPost = (values) => props.addPost(values.newPostText);\r\n\r\n    return <div className = {s.postsBlock}>\r\n        <AddNewPostFormResux onSubmit={onAddPost}/>\r\n        {postsElements}\r\n    </div>\r\n})\r\n\r\nconst AddNewPostForm = (props) => {\r\n    return(\r\n        <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field  name ='newPostText' \r\n                    component = {Textarea}\r\n                    validate={[required, maxLength10]}></Field>\r\n        </div>\r\n        <div>\r\n            <button>Add Post</button>\r\n        </div>\r\n    </form>\r\n    )\r\n}\r\nconst AddNewPostFormResux = reduxForm({form:'ProfileAddNewPostForm'}) (AddNewPostForm)\r\n\r\nexport default MyPosts","import MyPosts from './MyPosts'\r\nimport { addPostAction } from '../../../redux/profileReducer'\r\nimport {connect} from 'react-redux'\r\n\r\nconst mapStateToProps = (state) => { //отвечает за данные\r\n        return{\r\n            posts: state.profilePage.posts,\r\n            newPostText: state.profilePage.newPostText\r\n        }\r\n    }\r\n    \r\nconst mapDispatchToProps = (dispatch) => { //отвечает за отправление данных через коллбеки\r\n        return {\r\n            addPost: (newPostText) => {\r\n                dispatch(addPostAction(newPostText));\r\n            }\r\n        }\r\n}  \r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer","import React, { useEffect, useState } from 'react'\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n    \r\n    // let stateWithSetState = useState (false); // создаём значение для локального стейта\r\n    // let editMode = stateWithSetState[0]; // значение\r\n    // let setEditMode = stateWithSetState[1] // функция меняющая значение\r\n\r\n    let [editMode, setEditMode] = useState (false); // тоже самое только короче\r\n    let [status, setStatus] = useState (props.status);\r\n    \r\n    useEffect ( () => { // выполнит функцию после отрисовки\r\n        setStatus(props.status)\r\n    }, [props.status]) // выполняется в момент изменения [этой] переменной\r\n\r\n    const activateEditMode = () => {setEditMode (true)};\r\n    const deactivateEditMode = () => {\r\n        setEditMode (false)\r\n        props.updateStatus(status)\r\n    };\r\n    const onStatusChange = (e) => {setStatus(e.currentTarget.value)} \r\n\r\n    return <div>\r\n        {!editMode &&\r\n            <div className=\"div\">\r\n                <span onClick = {activateEditMode}>{props.status || '---'}</span>\r\n            </div>\r\n        }\r\n        {editMode &&\r\n            <div className=\"div\">\r\n                <input onChange = {onStatusChange} \r\n                        onBlur = {deactivateEditMode} \r\n                        autoFocus = {true}\r\n                        value = {status}/>\r\n            </div>\r\n        }\r\n    </div>\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import style from './profileInfo.module.css'\r\nimport withoutPhoto from '../../../img/withoutPhoto.png'\r\nimport ProfileStatusWithHooks from './ProfileStatus/ProfileStatusWithHooks'\r\n\r\nconst ProfileInfo = ({profile, updateStatus, status}) => {\r\n\r\n    return <div>\r\n            {/* <img className = {style.headImage} src=\"https://ixbt.online/gametech/covers/2021/01/24/5feQSxEw1eNV7Vs9UNDARHLvFgTueSqHym4qXnvc.jpg\" alt=\"\"/> */}            \r\n            <div className = {style.descriptionBlock}>\r\n            <div> {profile.photos.large\r\n               ? <img className = {style.avatar} src={profile.photos.large} alt = 'Аватарки нет :('/>\r\n               : <img className = {style.avatar} src = {withoutPhoto} alt = 'Аватарки нет :('/> }\r\n            </div>\r\n            <div className = {style.profileName}>Имя: {profile.fullName}</div>\r\n        </div>\r\n        <ProfileStatusWithHooks status = {status} updateStatus = {updateStatus}/>\r\n\r\n    </div>\r\n}\r\n\r\nexport default ProfileInfo;","import MyPostsContainer from './MyPosts/MyPostsContainer'\r\nimport './Profile'\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo'\r\nimport Preloader from '../common/Preloader/Preloader';\r\n\r\n\r\nconst Profile = (props) => {\r\n    \r\n    if (!props.profile) {//если profile null или undefinded\r\n        return <Preloader/>\r\n    }\r\n    \r\n    return <div>\r\n        <ProfileInfo profile = {props.profile}\r\n        status = {props.status}\r\n        updateStatus = {props.updateStatus}/>\r\n        <MyPostsContainer store = {props.store}/>\r\n    </div>\r\n}\r\n\r\nexport default Profile;","import React from 'react'\r\nimport Profile from './Profile'\r\nimport {connect} from 'react-redux'\r\nimport {getStatus, getUserProfile, updateStatus} from '../../redux/profileReducer'\r\nimport { withRouter } from 'react-router'\r\nimport { compose } from 'redux'\r\nimport {withAuthRedirect} from '../../HOC/withAuthRedirect'\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    componentDidMount() { \r\n        let userId = this.props.match.params.userId; // match - воспадение найдено\r\n        if (!userId) { \r\n            userId = this.props.authorizedUserId;\r\n            if (!userId){\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props} \r\n                profile = {this.props.profile}\r\n                users = {this.users}\r\n                status = {this.props.status}\r\n                updateStatus = {this.props.updateStatus}\r\n                ></Profile>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({ //функция возвращает объект\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose(\r\n    connect (mapStateToProps, {getUserProfile, getStatus, updateStatus,}),\r\n    withRouter,     //передаём информацию из url\r\n    withAuthRedirect\r\n)(ProfileContainer)"],"sourceRoot":""}